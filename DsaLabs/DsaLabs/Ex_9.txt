
EXERCISE 9.
Stacks VS Queues 2.

-   How can a queue be implemented by using two stacks?:

One way to do it is like this:

Say we have to Stacks with unlimited size, S1 and S2.
When enqueueing we simply push to S1. 

When dequeueing we check if both Stacks are empty, if they are,
the queue is empty. If only S2 is empty, we pop all elements
from S1 and push them to S2 ( order gets reversed ).

Then we pop from S2, and return the element.

If S1 and S2 does not have unlimited size, things get a bit 
more complicated. If Both S1 and S2 is full the queue is full.
If S1 is full when we try to enqueue, we have to transfer as many
elements as we can from S1 to S2, by poping S1 and push to S2. 

To keep the order of the elements, this transfer would need to
be done by creating a new temporary Stack and move elements between
the three Stacks.

-   What would be the running time of the resulting queue operations?

If the size of S1 and S2 is unlimited, the cost of enqueue and dequeue
is 1 if S2 is not empty,
if S2 is empty when we want to dequeue we have to move all elements
 from S1 to S2 and the cost is then the number of elements: n.

If we have Stacks with limited size the running gets longer. The worst
case is still when S1 is full and S2 is empty, then we have to copy all
the  elements and the cost is: n.
