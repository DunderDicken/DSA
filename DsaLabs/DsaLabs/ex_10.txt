
EXERCISE 10.
Union of two stacks, pseudo-code.

I was not sure how to interpret this excerise, but I  made a choice to
implement a crude pseudo-code to simply store the elements from both Stacks
in one new big stack and lose the functionality of the two original
stacks. Maybe the task was to have two "working" stacks in one
data structure?

///// Stack with Linked list ////////
*/
* 
* A function that creates a union of two stakcs.
* It connects the lists in two Stacks to each other.
* Then it sorts the new list and deletes all duplicate elements.
*
*/

INPUT: Stack S1, S2.
OUTPUT: A Stack with the same sentinel adress as S1, which contains all elements from S1 and S2.

UNION_LINKEDLIST(S1, S2)

	S2.list.nil.next.prev <-- S1.list.nil.prev
	S1.list.nil.prev.next <-- S2.list.nil.next
	S2.list.nil.prev.next <-- S1.list.nil
	S1.list.nil.prev <-- S2.list.nil.prev


	SORT( S1.list )
	DELETE_DUPLICATES(S 1.list )


//// Running Time //////

The running time of the UNION_LINKEDLIST:
In the beginning of the function no data is copied or moved, only pointers.
So the length of the lists should make no difference here. My guess is that
the running time of this would be O(1). The SORT and DELETE_DUPLICATES has to
go through all elements of both list ( we can say n = S1.list.Size, m = S2.list.size )

Running time would be: 1 + 2x( m + n )
This is a linnear time , O( m + n ) = O(n)

///// Stack with Array ////////
*/
* 
* A function that creates a union of two stakcs.
* It pops all elements from S1 and S2 and push to a new stack
* Then it sorts the Stack and deletes all duplicate elements.
*
*/

INPUT: Stack S1, S2.
OUTPUT: A Stack S, which contains all elements from S1 and S2.

UNION_ARRAY(S1, S2)

	Stack S = createStack(S1.size + S2.size) 
	
	While S1.top != 0
		PUSH(S, POP(S1))

	While S2.top != 0
		PUSH(S, POP(S2))

	SORT(S.Array)
	DELETE_DUPLICATES(S.Array)

//// Running Time //////

The running time of UNION_ARRAY:
The creation of a new stack has a cost of 1. All the other steps in the function has to go 
through all elements in S1 and S2 ( we can say n = S1.size, m = S2.size ).

This would result in a running time: 1 + m + n + 2x(m + n)
This requires more operations than with a Linked List, the function
has to go through the two Stacks at least two times each, but the running time
is still linnear time, so my guess is it won't be a big differnce. 